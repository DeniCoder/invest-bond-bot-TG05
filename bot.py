import asyncio
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from filters import get_bonds_with_ticker, get_bonds_with_filters, format_bonds_list, MoexBondsAPI
from config import BOT_TOKEN
from keyboard import (
    get_main_keyboard, get_filter_keyboard, get_setting_keyboard, get_change_keyboard
)
from text import welcome_text, help_text, search_text, not_search_text


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
class BondStates(StatesGroup):
    waiting_for_ticker = State()
    waiting_for_min_yield = State()
    waiting_for_max_yield = State()
    waiting_for_min_duration = State()
    waiting_for_max_duration = State()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
user_filters = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


@dp.message(CommandStart())
async def start_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    if user_id not in user_filters:
        user_filters[user_id] = {}

    text = welcome_text()
    await message.answer(text, reply_markup=get_main_keyboard())

@dp.message(Command("help"))
async def help_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    text = help_text()
    await message.answer(text, reply_markup=get_main_keyboard())

@dp.callback_query(F.data == "help")
async def help_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏"""
    await help_handler(callback.message)
    await callback.answer()

@dp.callback_query(F.data == "search_ticker")
async def search_ticker_callback(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ —Ç–∏–∫–µ—Ä—É"""
    await state.set_state(BondStates.waiting_for_ticker)

    text = search_text()
    await callback.message.edit_text(text)
    await callback.answer()

@dp.callback_query(F.data == "search_filters")
async def search_filters_callback(callback: CallbackQuery):
    """–ü–æ–∏—Å–∫ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º"""
    user_id = callback.from_user.id
    filters = user_filters.get(user_id, {})

    if not filters:
        text = not_search_text()
        keyboard = get_setting_keyboard()
        await callback.message.edit_text(text, reply_markup=keyboard)
    else:
        await callback.message.edit_text("üîÑ –ü–æ–∏—Å–∫ –æ–±–ª–∏–≥–∞—Ü–∏–π...")

        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
            search_filters = filters.copy()
            search_filters['status'] = 'A'  # –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ
            search_filters['exclude_matured'] = True  # –ò—Å–∫–ª—é—á–∏—Ç—å –ø–æ–≥–∞—à–µ–Ω–Ω—ã–µ

            bonds = get_bonds_with_filters(search_filters)
            result_text = format_bonds_list(bonds, limit=5)

            keyboard = get_change_keyboard()

            await callback.message.edit_text(result_text, reply_markup=keyboard)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ–±–ª–∏–≥–∞—Ü–∏–π: {e}")
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ–±–ª–∏–≥–∞—Ü–∏–π: {str(e)}",
                reply_markup=get_main_keyboard()
            )

    await callback.answer()

@dp.callback_query(F.data == "setup_filters")
async def setup_filters_callback(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    user_id = callback.from_user.id
    filters = user_filters.get(user_id, {})

    filter_text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞\n\n"
    filter_text += "–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"

    if filters:
        if 'min_coupon_percent' in filters:
            filter_text += f"üìà –ú–∏–Ω. –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {filters['min_coupon_percent']}%\n"
        if 'max_coupon_percent' in filters:
            filter_text += f"üìâ –ú–∞–∫—Å. –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {filters['max_coupon_percent']}%\n"
        if 'min_duration' in filters:
            filter_text += f"‚è±Ô∏è –ú–∏–Ω. –¥—é—Ä–∞—Ü–∏—è: {filters['min_duration']} –¥–Ω–µ–π\n"
        if 'max_duration' in filters:
            filter_text += f"‚è∞ –ú–∞–∫—Å. –¥—é—Ä–∞—Ü–∏—è: {filters['max_duration']} –¥–Ω–µ–π\n"
    else:
        filter_text += "–§–∏–ª—å—Ç—Ä—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã\n"

    filter_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"

    await callback.message.edit_text(filter_text, reply_markup=get_filter_keyboard())
    await callback.answer()

@dp.callback_query(F.data == "back_to_main")
async def back_to_main_callback(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await start_handler(callback.message)
    await callback.answer()

@dp.callback_query(F.data == "reset_filters")
async def reset_filters_callback(callback: CallbackQuery):
    """–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"""
    user_id = callback.from_user.id
    user_filters[user_id] = {}

    await callback.message.edit_text(
        "‚úÖ –í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã",
        reply_markup=get_filter_keyboard()
    )
    await callback.answer("–§–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
@dp.callback_query(F.data == "set_min_yield")
async def set_min_yield_callback(callback: CallbackQuery, state: FSMContext):
    await state.set_state(BondStates.waiting_for_min_yield)
    await callback.message.edit_text(
        "üìà –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∫—É–ø–æ–Ω–Ω—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%):\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 20\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
    )
    await callback.answer()

@dp.callback_query(F.data == "set_max_yield")
async def set_max_yield_callback(callback: CallbackQuery, state: FSMContext):
    await state.set_state(BondStates.waiting_for_max_yield)
    await callback.message.edit_text(
        "üìâ –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∫—É–ø–æ–Ω–Ω—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%):\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 50\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "set_min_duration")
async def set_min_duration_callback(callback: CallbackQuery, state: FSMContext):
    await state.set_state(BondStates.waiting_for_min_duration)
    await callback.message.edit_text(
        "‚è±Ô∏è –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥—é—Ä–∞—Ü–∏—é (–¥–Ω–∏):\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 365\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
    )
    await callback.answer()

@dp.callback_query(F.data == "set_max_duration")
async def set_max_duration_callback(callback: CallbackQuery, state: FSMContext):
    await state.set_state(BondStates.waiting_for_max_duration)
    await callback.message.edit_text(
        "‚è∞ –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥—é—Ä–∞—Ü–∏—é (–¥–Ω–∏):\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 1000\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏–π
@dp.message(BondStates.waiting_for_ticker)
async def process_ticker(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–∏–∫–µ—Ä–∞"""
    ticker = message.text.strip().upper()

    await message.answer("üîÑ –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±–ª–∏–≥–∞—Ü–∏–∏...")

    try:
        bond_info = get_bonds_with_ticker(ticker)

        if bond_info:
            api = MoexBondsAPI()
            result_text = api.format_bond_info(bond_info)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
            if not any(key.lower().find('rating') != -1 for key in bond_info.keys()):
                result_text += "\n\n‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—Ä–µ–¥–∏—Ç–Ω–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API MOEX"
        else:
            result_text = f"‚ùå –û–±–ª–∏–≥–∞—Ü–∏—è —Å —Ç–∏–∫–µ—Ä–æ–º {ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

        await message.answer(result_text, reply_markup=get_main_keyboard())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ–±–ª–∏–≥–∞—Ü–∏–∏ {ticker}: {e}")
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ–±–ª–∏–≥–∞—Ü–∏–∏: {str(e)}",
            reply_markup=get_main_keyboard()
        )

    await state.clear()

@dp.message(BondStates.waiting_for_min_yield)
async def process_min_yield(message: Message, state: FSMContext):
    try:
        value = float(message.text.strip())
        user_id = message.from_user.id

        if user_id not in user_filters:
            user_filters[user_id] = {}

        user_filters[user_id]['min_coupon_percent'] = value

        await message.answer(
            f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {value}%",
            reply_markup=get_filter_keyboard()
        )
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ",
            reply_markup=get_filter_keyboard()
        )

    await state.clear()

@dp.message(BondStates.waiting_for_max_yield)
async def process_max_yield(message: Message, state: FSMContext):
    try:
        value = float(message.text.strip())
        user_id = message.from_user.id

        if user_id not in user_filters:
            user_filters[user_id] = {}

        user_filters[user_id]['max_coupon_percent'] = value

        await message.answer(
            f"‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {value}%",
            reply_markup=get_filter_keyboard()
        )
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ",
            reply_markup=get_filter_keyboard()
        )

    await state.clear()

@dp.message(BondStates.waiting_for_min_duration)
async def process_min_duration(message: Message, state: FSMContext):
    try:
        value = int(message.text.strip())
        user_id = message.from_user.id

        if user_id not in user_filters:
            user_filters[user_id] = {}

        user_filters[user_id]['min_duration'] = value

        await message.answer(
            f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥—é—Ä–∞—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {value} –¥–Ω–µ–π",
            reply_markup=get_filter_keyboard()
        )
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ",
            reply_markup=get_filter_keyboard()
        )

    await state.clear()

@dp.message(BondStates.waiting_for_max_duration)
async def process_max_duration(message: Message, state: FSMContext):
    try:
        value = int(message.text.strip())
        user_id = message.from_user.id

        if user_id not in user_filters:
            user_filters[user_id] = {}

        user_filters[user_id]['max_duration'] = value

        await message.answer(
            f"‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥—é—Ä–∞—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {value} –¥–Ω–µ–π",
            reply_markup=get_filter_keyboard()
        )
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ",
            reply_markup=get_filter_keyboard()
        )

    await state.clear()

@dp.message(Command("cancel"))
async def cancel_handler(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    await state.clear()
    await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
