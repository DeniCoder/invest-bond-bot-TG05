import asyncio
import requests
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import (
    Message, CallbackQuery,
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from config import BOT_TOKEN
from filters import get_bonds_with_filters

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîé –ü–æ–∏—Å–∫ –ø–æ —Ç–∏–∫–µ—Ä—É")],
        [KeyboardButton(text="‚öôÔ∏è –§–∏–ª—å—Ç—Ä –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º")]
    ],
    resize_keyboard=True
)

filter_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üèÜ –ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥", callback_data="filter_rating")],
    [InlineKeyboardButton(text="üìà –ú–∏–Ω. –∫—É–ø–æ–Ω–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)", callback_data="filter_coupon")],
    [InlineKeyboardButton(text="üìâ –ú–∏–Ω. –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∫ –ø–æ–≥–∞—à–µ–Ω–∏—é (%)", callback_data="filter_yield")],
    [InlineKeyboardButton(text="üìÖ –°—Ä–æ–∫ –¥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è (–ª–µ—Ç)", callback_data="filter_maturity")],
    [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", callback_data="apply_filters")]
])

user_filters = {}

@dp.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ–±–ª–∏–≥–∞—Ü–∏–π MOEX!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞:",
        reply_markup=main_menu
    )

@dp.message(F.text == "üîé –ü–æ–∏—Å–∫ –ø–æ —Ç–∏–∫–µ—Ä—É")
async def request_ticker(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –æ–±–ª–∏–≥–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, RU000A10B9Q9):")

@dp.message(F.text == "‚öôÔ∏è –§–∏–ª—å—Ç—Ä –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º")
async def show_filters(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:", reply_markup=filter_menu)

@dp.callback_query(F.data.startswith('filter_'))
async def process_filter_selection(callback_query: CallbackQuery):
    prompts = {
        "filter_rating": "–í–≤–µ–¥–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, A –∏–ª–∏ BBB):",
        "filter_coupon": "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∫—É–ø–æ–Ω–Ω—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%):",
        "filter_yield": "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∫ –ø–æ–≥–∞—à–µ–Ω–∏—é (%):",
        "filter_maturity": "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ –¥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è (–ª–µ—Ç):"
    }
    user_filters['current_filter'] = callback_query.data
    await bot.send_message(callback_query.from_user.id, prompts[callback_query.data])
    await callback_query.answer()

@dp.callback_query(F.data == "apply_filters")
async def apply_filters(callback_query: CallbackQuery):
    # —Å–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    filters = {k: v for k, v in user_filters.items() if k != 'current_filter'}
    await bot.send_message(callback_query.from_user.id, "–ò—â—É –æ–±–ª–∏–≥–∞—Ü–∏–∏‚Ä¶")
    bonds = get_bonds_with_filters(**filters)
    if not bonds:
        await bot.send_message(callback_query.from_user.id, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±–ª–∏–≥–∞—Ü–∏–π –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º")
        await callback_query.answer()
        return

    text = [f"–ù–∞–π–¥–µ–Ω–æ {len(bonds)} –æ–±–ª–∏–≥–∞—Ü–∏–π:\n"]
    for b in bonds:
        text.append(
            f"üìä {b['SECID']} ‚Äì {b.get('SHORTNAME','')}\n"
            f"   üèõ {b.get('SECNAME','')}, üí∞ {b.get('FACEVALUE','')} {b.get('CURRENCYID','')}\n"
            f"   üìÖ {b.get('MATDATE','')}, üìà {b.get('COUPONVALUE','')}%\n"
            f"   üìâ {b.get('YIELD','') or b.get('EFFECTIVEYIELD','')}%\n"
            f"   üè∑ {b.get('CREDITRATING','')}\n"
        )
    await bot.send_message(callback_query.from_user.id, "\n".join(text))
    await callback_query.answer()

@dp.message(~F.text.in_(["üîé –ü–æ–∏—Å–∫ –ø–æ —Ç–∏–∫–µ—Ä—É", "‚öôÔ∏è –§–∏–ª—å—Ç—Ä –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"]))
async def process_input(message: Message):
    if 'current_filter' in user_filters:
        cf = user_filters.pop('current_filter')
        text = message.text.strip()
        try:
            if cf == "filter_rating":
                user_filters['credit_rating'] = text.upper()
            elif cf == "filter_coupon":
                user_filters['min_coupon'] = float(text.replace(',', '.'))
            elif cf == "filter_yield":
                user_filters['min_yield'] = float(text.replace(',', '.'))
            elif cf == "filter_maturity":
                user_filters['years_to_maturity'] = int(text)
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return
        await message.answer("–§–∏–ª—å—Ç—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–ª–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã:", reply_markup=filter_menu)
    else:
        ticker = message.text.strip().upper()
        # 1) –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä—ã–Ω–∫—É
        url_market = f"https://iss.moex.com/iss/engines/stock/markets/bonds/securities/{ticker}.json"
        # 2) –¥–∞–Ω–Ω—ã–µ –ø–æ —ç–º–∏—Ç–µ–Ω—Ç—É –∏ —Ä–µ–π—Ç–∏–Ω–≥—É
        url_info   = f"https://iss.moex.com/iss/securities/{ticker}.json"
        try:
            r1 = requests.get(url_market, params={'iss.meta': 'off'}); r1.raise_for_status()
            r2 = requests.get(url_info,   params={'iss.meta': 'off'}); r2.raise_for_status()
            jm = r1.json().get('securities', {})
            cols, rows = jm.get('columns', []), jm.get('data', [])
            if not rows:
                await message.answer(f"–û–±–ª–∏–≥–∞—Ü–∏—è {ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            data = dict(zip(cols, rows[0]))

            js = r2.json().get('securities', {})
            cols2, rows2 = js.get('columns', []), js.get('data', [])
            info = dict(zip(cols2, rows2[0])) if rows2 else {}

            # marketdata –¥–ª—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
            md = r1.json().get('marketdata', {})
            mc, mr = md.get('columns', []), md.get('data', [])
            market = dict(zip(mc, mr[0])) if mr else {}
            yld = r1.json().get('marketdata_yields', {})
            yc, yr = yld.get('columns', []), yld.get('data', [])
            yields = dict(zip(yc, yr[0])) if yr else {}

            await message.answer(
                f"üìä –ò–Ω—Ñ–æ –ø–æ {ticker}:\n\n"
                f"üèõ –≠–º–∏—Ç–µ–Ω—Ç: {info.get('ISSUER','')}\n"
                f"üí∞ –ù–æ–º–∏–Ω–∞–ª: {data.get('FACEVALUE','')} {data.get('CURRENCYID','')}\n"
                f"üìÖ –ü–æ–≥–∞—à–µ–Ω–∏–µ: {data.get('MATDATE','')}\n"
                f"üìà –ö—É–ø–æ–Ω: {data.get('COUPONVALUE','')}%\n"
                f"üìâ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {market.get('YIELD','') or yields.get('EFFECTIVEYIELD','')}%\n"
                f"üè∑ –†–µ–π—Ç–∏–Ω–≥: {info.get('CREDITRATING','')}\n"
                f"üì¶ –ê–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—è: {'–î–∞' if data.get('AMORTIZATIONDATE') and data['AMORTIZATIONDATE']!='0000-00-00' else '–ù–µ—Ç'}\n"
                f"üìÇ –û—Ñ–µ—Ä—Ç–∞: {'–î–∞' if data.get('OFFERDATE') and data['OFFERDATE']!='0000-00-00' else '–ù–µ—Ç'}"
            )
        except Exception as e:
            print(f"Error: {e}")
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
