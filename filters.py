import requests
import json
from typing import List, Dict, Optional
import time

class MoexBondsAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –ë–∏—Ä–∂–∏ –¥–ª—è –æ–±–ª–∏–≥–∞—Ü–∏–π"""

    def __init__(self):
        self.base_url = "https://iss.moex.com/iss"
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        })

    def _make_request(self, url: str, params: dict = None) -> Optional[dict]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å HTTP –∑–∞–ø—Ä–æ—Å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            response = self.session.get(url, params=params, timeout=10)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {url}: {e}")
            return None

    def get_all_bonds(self, board_id: str = "TQCB", limit: int = None) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–±–ª–∏–≥–∞—Ü–∏–π

        Args:
            board_id: –†–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤ (TQCB - –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ, TQOB - –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ)
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π

        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–± –æ–±–ª–∏–≥–∞—Ü–∏—è—Ö
        """
        url = f"{self.base_url}/engines/stock/markets/bonds/boards/{board_id}/securities.json"

        params = {
            "iss.meta": "off",
            "iss.only": "securities,marketdata_yields"
        }

        if limit:
            params["limit"] = limit

        data = self._make_request(url, params)
        if not data:
            return []

        bonds = []

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–±–ª–∏–≥–∞—Ü–∏—è—Ö
        securities = data.get('securities', {})
        securities_columns = securities.get('columns', [])
        securities_data = securities.get('data', [])

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
        yields = data.get('marketdata_yields', {})
        yields_columns = yields.get('columns', [])
        yields_data = yields.get('data', [])

        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π –ø–æ SECID
        yields_dict = {}
        if yields_columns and yields_data:
            secid_idx = yields_columns.index('SECID') if 'SECID' in yields_columns else None
            if secid_idx is not None:
                for yield_row in yields_data:
                    if len(yield_row) > secid_idx and yield_row[secid_idx]:
                        secid = yield_row[secid_idx]
                        yield_info = {}
                        for i, col in enumerate(yields_columns):
                            if i < len(yield_row):
                                yield_info[col.lower()] = yield_row[i]
                        yields_dict[secid] = yield_info

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ–±–ª–∏–≥–∞—Ü–∏–π
        for row in securities_data:
            bond = {}

            # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            for i, col in enumerate(securities_columns):
                if i < len(row):
                    bond[col.lower()] = row[i]

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
            secid = bond.get('secid')
            if secid and secid in yields_dict:
                bond.update(yields_dict[secid])

            bonds.append(bond)

        return bonds

    def get_bond_by_ticker(self, ticker: str) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–ª–∏–≥–∞—Ü–∏–∏ –ø–æ —Ç–∏–∫–µ—Ä—É

        Args:
            ticker: –¢–∏–∫–µ—Ä –æ–±–ª–∏–≥–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, RU000A0JXPD9)

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–± –æ–±–ª–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ None
        """
        url = f"{self.base_url}/engines/stock/markets/bonds/securities/{ticker}.json"

        params = {
            "iss.meta": "off",
            "iss.only": "securities,marketdata,marketdata_yields"
        }

        data = self._make_request(url, params)
        if not data:
            return None

        bond_info = {}

        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        securities = data.get('securities', {})
        if securities.get('data') and securities.get('columns'):
            row = securities['data'][0]
            for i, col in enumerate(securities['columns']):
                if i < len(row):
                    bond_info[col.lower()] = row[i]

        # –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        marketdata = data.get('marketdata', {})
        if marketdata.get('data') and marketdata.get('columns'):
            row = marketdata['data'][0]
            for i, col in enumerate(marketdata['columns']):
                if i < len(row):
                    bond_info[f"market_{col.lower()}"] = row[i]

        # –î–∞–Ω–Ω—ã–µ –æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
        yields = data.get('marketdata_yields', {})
        if yields.get('data') and yields.get('columns'):
            row = yields['data'][0]
            for i, col in enumerate(yields['columns']):
                if i < len(row):
                    bond_info[f"yield_{col.lower()}"] = row[i]

        return bond_info

    def filter_bonds(self, bonds: List[Dict], filters: Dict) -> List[Dict]:
        """
        –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –æ–±–ª–∏–≥–∞—Ü–∏–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º

        Args:
            bonds: –°–ø–∏—Å–æ–∫ –æ–±–ª–∏–≥–∞—Ü–∏–π
            filters: –°–ª–æ–≤–∞—Ä—å —Å –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏

        Returns:
            –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–±–ª–∏–≥–∞—Ü–∏–π
        """
        filtered_bonds = []

        for bond in bonds:
            include_bond = True

            # –§–∏–ª—å—Ç—Ä –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫—É–ø–æ–Ω–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
            if 'min_coupon_percent' in filters:
                coupon_percent = bond.get('couponpercent')
                if coupon_percent is None or float(coupon_percent) < filters['min_coupon_percent']:
                    include_bond = False

            # –§–∏–ª—å—Ç—Ä –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∫—É–ø–æ–Ω–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
            if 'max_coupon_percent' in filters:
                coupon_percent = bond.get('couponpercent')
                if coupon_percent is None or float(coupon_percent) > filters['max_coupon_percent']:
                    include_bond = False

            # –§–∏–ª—å—Ç—Ä –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
            if 'min_effective_yield' in filters:
                effective_yield = bond.get('effectiveyield')
                if effective_yield is None or float(effective_yield) < filters['min_effective_yield']:
                    include_bond = False

            # –§–∏–ª—å—Ç—Ä –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
            if 'max_effective_yield' in filters:
                effective_yield = bond.get('effectiveyield')
                if effective_yield is None or float(effective_yield) > filters['max_effective_yield']:
                    include_bond = False

            # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É (–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±–ª–∏–≥–∞—Ü–∏–∏)
            if 'status' in filters:
                if bond.get('status') != filters['status']:
                    include_bond = False

            # –§–∏–ª—å—Ç—Ä –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥—é—Ä–∞—Ü–∏–∏
            if 'min_duration' in filters:
                duration = bond.get('duration')
                if duration is None or float(duration) < filters['min_duration']:
                    include_bond = False

            # –§–∏–ª—å—Ç—Ä –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥—é—Ä–∞—Ü–∏–∏
            if 'max_duration' in filters:
                duration = bond.get('duration')
                if duration is None or float(duration) > filters['max_duration']:
                    include_bond = False

            # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ –ø–æ–≥–∞—à–µ–Ω–∏—è (–∏—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –ø–æ–≥–∞—à–µ–Ω–Ω—ã–µ)
            if 'exclude_matured' in filters and filters['exclude_matured']:
                matdate = bond.get('matdate')
                if matdate and matdate != '0000-00-00':
                    from datetime import datetime
                    try:
                        mat_date = datetime.strptime(matdate, '%Y-%m-%d')
                        if mat_date < datetime.now():
                            include_bond = False
                    except:
                        pass

            if include_bond:
                filtered_bonds.append(bond)

        return filtered_bonds

    def format_bond_info(self, bond: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–ª–∏–≥–∞—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞"""
        secid = bond.get('secid', 'N/A')
        shortname = bond.get('shortname', 'N/A')
        coupon_percent = bond.get('couponpercent', 'N/A')
        effective_yield = bond.get('effectiveyield', 'N/A')
        matdate = bond.get('matdate', 'N/A')
        duration = bond.get('duration', 'N/A')

        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        price = bond.get('market_last') or bond.get('market_waprice') or bond.get('prevprice') or 'N/A'

        return f"""
üìä {shortname} ({secid})
üí∞ –ö—É–ø–æ–Ω–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {coupon_percent}%
üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {effective_yield}%
üíµ –¶–µ–Ω–∞: {price}
üìÖ –ü–æ–≥–∞—à–µ–Ω–∏–µ: {matdate}
‚è±Ô∏è –î—é—Ä–∞—Ü–∏—è: {duration} –¥–Ω–µ–π
üîó ISIN: {bond.get('isin', 'N/A')}
        """.strip()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Telegram –±–æ—Ç–µ
def get_bonds_with_ticker(ticker: str) -> Dict:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–ª–∏–≥–∞—Ü–∏–∏ –ø–æ —Ç–∏–∫–µ—Ä—É"""
    api = MoexBondsAPI()
    return api.get_bond_by_ticker(ticker)

def get_bonds_with_filters(filters: Dict) -> List[Dict]:
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±–ª–∏–≥–∞—Ü–∏–∏ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º"""
    api = MoexBondsAPI()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –æ–±–ª–∏–≥–∞—Ü–∏–∏
    all_bonds = api.get_all_bonds(board_id="TQCB")

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    filtered_bonds = api.filter_bonds(all_bonds, filters)

    return filtered_bonds

def format_bonds_list(bonds: List[Dict], limit: int = 10) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±–ª–∏–≥–∞—Ü–∏–π –¥–ª—è –≤—ã–≤–æ–¥–∞"""
    if not bonds:
        return "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±–ª–∏–≥–∞—Ü–∏–π –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º"

    api = MoexBondsAPI()
    result = f"–ù–∞–π–¥–µ–Ω–æ {len(bonds)} –æ–±–ª–∏–≥–∞—Ü–∏–π. –ü–æ–∫–∞–∑—ã–≤–∞—é –ø–µ—Ä–≤—ã–µ {min(limit, len(bonds))}:\n\n"

    for i, bond in enumerate(bonds[:limit]):
        result += f"{i+1}. {api.format_bond_info(bond)}\n\n"

    return result
